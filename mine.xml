<Module>
<ModulePrefs title="mc"/>
<Content type="html">
<![CDATA[ <!DOCTYPE html>
<html style="width:100%;height:100%;background-color:black;">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0" />
<meta name="description" content="EaglercraftX 1.8 Offline" />
<meta name="keywords" content="eaglercraft, eaglercraftx, minecraft, 1.8, 1.8.8" />
<title>EaglercraftX 1.8</title>
<meta property="og:locale" content="en-US" />
<meta property="og:type" content="website" />
<meta property="og:title" content="EaglercraftX 1.8" />
<meta property="og:description" content="Play minecraft 1.8 in your browser" />
<script type="text/javascript">
"use strict";
var relayId = Math.floor(Math.random() * 3);

// %%%%%%%%% launch options %%%%%%%%%%%%

window.eaglercraftXOptsHints = {
	hintsVersion: 1,
	container: "game_frame",
	worldsDB: "worlds",
	relays: [
		{ addr: "wss://relay.deev.is/", comment: "lax1dude relay #1", primary: relayId === 0 },
		{ addr: "wss://relay.lax1dude.net/", comment: "lax1dude relay #2", primary: relayId === 1 },
		{ addr: "wss://relay.shhnowisnottheti.me/", comment: "ayunami relay #1", primary: relayId === 2 }
	],
	checkRelaysForUpdates: true
};

// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

</script>
<style id="eaglercraftXClientSignature"></style>
<style id="eaglercraftXClientBundle"></style>
<script>
    fetch("https://cdn.jsdelivr.net/gh/genizy/google-class/bin/eaglercraftXClientSignature.txt")
        .then(response => response.text())
        .then(base64Data => {
            const styleTag = document.getElementById('eaglercraftXClientSignature');
            styleTag.type = 'eaglercraft';
            styleTag.textContent = `data:application/octet-stream;base64,${base64Data}`;
        })
        .catch(err => console.error('Failed to load the signature file:', err));

	fetch("https://cdn.jsdelivr.net/gh/genizy/google-class/bin/eaglercraftXClientBundle.txt")
        .then(response => response.text())
        .then(base64Data => {
            const styleTag = document.getElementById('eaglercraftXClientBundle');
            styleTag.type = 'eaglercraft';
            styleTag.textContent = `data:application/octet-stream;base64,${base64Data}`;
        })
        .catch(err => console.error('Failed to load the signature file:', err));
</script>
<script type="text/javascript">
"use strict";
(function(){
	function eaglerBundleUnwrap(tagIn) { var e = document.getElementById(tagIn); var ret = e.innerText; document.head.removeChild(e); return ret;  }
	window.eaglercraftXClientSignature = eaglerBundleUnwrap("eaglercraftXClientSignature");
	window.eaglercraftXClientBundle = eaglerBundleUnwrap("eaglercraftXClientBundle");
})();
</script>
<script type="text/javascript">
"use strict";
(function(){
	(function(a){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=a();else if("function"==typeof define&&define.amd)define([],a);else{var b;b="undefined"==typeof window?"undefined"==typeof global?"undefined"==typeof self?this:self:global:window,b.base64js=a()}})(function(){return function(){function b(d,e,g){function a(j,i){if(!e[j]){if(!d[j]){var f="function"==typeof require&&require;if(!i&&f)return f(j,!0);if(h)return h(j,!0);var c=new Error("Cannot find module '"+j+"'");throw c.code="MODULE_NOT_FOUND",c}var k=e[j]={exports:{}};d[j][0].call(k.exports,function(b){var c=d[j][1][b];return a(c||b)},k,k.exports,b,d,e,g)}return e[j].exports}for(var h="function"==typeof require&&require,c=0;c<g.length;c++)a(g[c]);return a}return b}()({"/":[function(a,b,c){'use strict';function d(a){var b=a.length;if(0<b%4)throw new Error("Invalid string. Length must be a multiple of 4");var c=a.indexOf("=");-1===c&&(c=b);var d=c===b?0:4-c%4;return[c,d]}function e(a,b,c){return 3*(b+c)/4-c}function f(a){var b,c,f=d(a),g=f[0],h=f[1],j=new m(e(a,g,h)),k=0,n=0<h?g-4:g;for(c=0;c<n;c+=4)b=l[a.charCodeAt(c)]<<18|l[a.charCodeAt(c+1)]<<12|l[a.charCodeAt(c+2)]<<6|l[a.charCodeAt(c+3)],j[k++]=255&b>>16,j[k++]=255&b>>8,j[k++]=255&b;return 2===h&&(b=l[a.charCodeAt(c)]<<2|l[a.charCodeAt(c+1)]>>4,j[k++]=255&b),1===h&&(b=l[a.charCodeAt(c)]<<10|l[a.charCodeAt(c+1)]<<4|l[a.charCodeAt(c+2)]>>2,j[k++]=255&b>>8,j[k++]=255&b),j}function g(a){return k[63&a>>18]+k[63&a>>12]+k[63&a>>6]+k[63&a]}function h(a,b,c){for(var d,e=[],f=b;f<c;f+=3)d=(16711680&a[f]<<16)+(65280&a[f+1]<<8)+(255&a[f+2]),e.push(g(d));return e.join("")}function j(a){for(var b,c=a.length,d=c%3,e=[],f=16383,g=0,j=c-d;g<j;g+=f)e.push(h(a,g,g+f>j?j:g+f));return 1===d?(b=a[c-1],e.push(k[b>>2]+k[63&b<<4]+"==")):2===d&&(b=(a[c-2]<<8)+a[c-1],e.push(k[b>>10]+k[63&b>>4]+k[63&b<<2]+"=")),e.join("")}c.byteLength=function(a){var b=d(a),c=b[0],e=b[1];return 3*(c+e)/4-e},c.toByteArray=f,c.fromByteArray=j;for(var k=[],l=[],m="undefined"==typeof Uint8Array?Array:Uint8Array,n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",o=0,p=n.length;o<p;++o)k[o]=n[o],l[n.charCodeAt(o)]=o;l[45]=62,l[95]=63},{}]},{},[])("/")});
	var sameOriginSupport = -1;
	var checkSameOriginSupport = function(callback0) {
		if(sameOriginSupport == -1) {
			try {
				(function(callback) {
					if((typeof URL === "undefined") || (typeof URL.createObjectURL !== "function")) {
						sameOriginSupport = 1;
						callback(false);
					}else {
						var theObjURL = URL.createObjectURL(new Blob([new Uint8Array([69, 69, 69, 69])]));
						if(!theObjURL) {
							sameOriginSupport = 1;
							callback(false);
						}
						doXHR(theObjURL, function(dataRet) {
							if(dataRet) {
								var typedArr = new Uint8Array(dataRet);
								if(typedArr.length === 4 && typedArr[0] === 69 && typedArr[1] === 69 && typedArr[2] === 69 && typedArr[3] === 69) {
									sameOriginSupport = 0;
									callback(true);
								}else {
									sameOriginSupport = 1;
									callback(false);
								}
							}else {
								sameOriginSupport = 1;
								callback(false);
							}
						});
					}
				})(function(valRet) {
					if(!valRet) {
						console.error("Same origin XHR support detected as false, using data: url...");
					}
					callback0(valRet);
				});
			}catch(ex) {
				console.error("Same origin XHR support detection failed, using data: url...");
				callback0(false);
			}
		}else {
			callback0(!sameOriginSupport);
		}
	};
	var blobToArrayBuffer = function(blobIn, callback) {
		if(typeof blobIn.arrayBuffer === "undefined") {
			blobIn.arrayBuffer().then(callback);
		}else {
			(function(phileReader) {
				phileReader.addEventListener("load", function(evt) {
					callback(phileReader.result);
				});
				phileReader.readAsArrayBuffer(blobIn);
			})(new FileReader());
		}
	};
	var completeXHR = function(callback, arg) {
		if(!callback.comp) {
			callback.comp = true;
			callback.cb(arg);
		}
	};
	var doXHR = function(urlIn, callback) {
		(function(theXHRObj, callbackStruct){
			theXHRObj.responseType = "arraybuffer";
			theXHRObj.addEventListener("load", function(evt) { var stat = theXHRObj.status; if(stat === 0 || (stat >= 200 && stat < 400)) { completeXHR(callbackStruct, theXHRObj.response); } else { completeXHR(callbackStruct, null); } });
			theXHRObj.addEventListener("error", function(evt) {  completeXHR(callbackStruct, null); });
			theXHRObj.open("GET", urlIn, true);
			theXHRObj.send();
		})(new XMLHttpRequest(), { cb: callback, comp: false });
	};
	var decodeBase64URL = function(urlIn, callbackOut) {
		doXHR(urlIn, function(data) {
			if(!data) {
				try {
					console.error("Caught an error decoding base64 via fetch, doing it the slow way instead...");
					callbackOut(base64js.toByteArray(urlIn.substring(37)).buffer);
				}catch(ex) {
					console.error("Failed to decode base64!");
					console.error(ex);
					callbackOut(null);
				}
			}else {
				callbackOut(data);
			}
		});
	};
	if(typeof window.DecompressionStream === "undefined") {
		checkSameOriginSupport(function(soSupported) {
			var theWorkerObj;
			var workerSrc;
			fetch("https://cdn.jsdelivr.net/gh/genizy/google-class/bin/workerSrc.txt")
        		.then(response => response.text())
        		.then(txt => {
            		workerSrc = txt;
        		})
        		.catch(err => console.error('Failed to load worker:', err));
			if(soSupported) {
				theWorkerObj = new Worker(URL.createObjectURL(new Blob([base64js.toByteArray(workerSrc).buffer], { type: "text/javascript" })));
			}else {
				theWorkerObj = new Worker("data:text/javascript;base64," + workerSrc);
			}
			theWorkerObj.addEventListener("message", function(evt) {
				if(evt.data.status === "ready") {
					decodeBase64URL(window.eaglercraftXClientBundle, function(cbData) {
						if(cbData) {
							theWorkerObj.postMessage(cbData);
						}else {
							alert("Failed to decode eaglercraftXClientBundle base64!");
						}
					});
				}else if(evt.data.status === "success") {
					if(soSupported) {
						window.clientScriptSrcURL = URL.createObjectURL(new Blob([evt.data.data.buffer], { type: "text/javascript;charset=utf-8" }));
					}else {
						window.clientScriptSrcURL = "data:text/javascript;charset=utf-8;base64," + base64js.fromByteArray(evt.data.data);
					}
				}else {
					alert("Failed to decompress classes.js via legacy javascript implementation!");
				}
			});
			theWorkerObj.addEventListener("error", function(evt) {
				console.error(evt.error);
			});
		});
	}else {
		var ds = new window.DecompressionStream("gzip");
		var result = [];
		var fetchStream = function(reader) {
			var processData;
			reader.read().then(processData = function(evt) {
				if (evt.done) {
					(function(blobObj){
						checkSameOriginSupport(function(supported) {
							if(supported) {
								window.clientScriptSrcURL = URL.createObjectURL(blobObj);
							}else {
								blobToArrayBuffer(blobObj, function(arr) {
									console.log(arr);
									window.clientScriptSrcURL = "data:text/javascript;charset=utf-8;base64," + base64js.fromByteArray(new Uint8Array(arr));
								});
							}
						});
					})(new Blob(result, { type: "text/javascript;charset=utf-8" }));
					result = [];
					ds = null;
					return;
				}
				result.push(evt.value);
				return reader.read().then(processData);
			});
		};
		decodeBase64URL(window.eaglercraftXClientBundle, function(cbData) {
			if(cbData) {
				fetchStream((new Blob([cbData])).stream().pipeThrough(ds).getReader());
			}else {
				alert("Failed to decode eaglercraftXClientBundle base64!");
			}
		});
	}
})();
</script>
<script type="text/javascript">
"use strict";
(function(){
	var launchInterval = -1;
	var launchCounter = 1;
	var launchCountdownNumberElement = null;
	var launchCountdownProgressElement = null;
	var launchSkipCountdown = false;
	var launchTick = function() {
		if(launchCounter > 100 || launchSkipCountdown) {
			if(window.clientScriptSrcURL) {
				clearInterval(launchInterval);
				setTimeout(function() {
					document.body.removeChild(document.getElementById("launch_countdown_screen"));
					document.body.style.backgroundColor = "black";
					var script = document.createElement("script");
					script.type = "text/javascript";
					script.src = window.clientScriptSrcURL;
					window.clientScriptSrcURL = null;
					document.head.appendChild(script);
				}, 50);
			}
			return;
		}
		if(launchCounter === 100) {
			document.getElementById("gameWillLaunchIn").innerText = "Decompressing...";
		}else {
			launchCountdownNumberElement.innerText = "" + Math.floor(6.0 - launchCounter * 0.06);
		}
		launchCountdownProgressElement.style.width = "" + launchCounter + "%";
		++launchCounter;
	};
	window.addEventListener("load", function() {
		launchCountdownNumberElement = document.getElementById("launchCountdownNumber");
		launchCountdownProgressElement = document.getElementById("launchCountdownProgress");
		launchInterval = setInterval(launchTick, 50);
		document.getElementById("skipCountdown").addEventListener("click", function() {
			launchSkipCountdown = true;
			document.getElementById("gameWillLaunchIn").innerText = "Decompressing...";
		});
		document.getElementById("bootMenu").addEventListener("click", function() {
			launchSkipCountdown = true;
			document.getElementById("gameWillLaunchIn").innerText = "Decompressing...";
			window.eaglercraftXOptsHints.showBootMenuOnLaunch = true;
		});
	});
})();
</script>
<link type="image/png" rel="shortcut icon" href="https://cdn.jsdelivr.net/gh/genizy/google-class/bin/logo.png" />
</head>
<body style="margin:0px;width:100%;height:100%;overflow:hidden;background-color:white;" id="game_frame">
<div style="margin:0px;width:100%;height:100%;font-family:sans-serif;display:flex;align-items:center;user-select:none;" id="launch_countdown_screen">
<div style="margin:auto;text-align:center;">
<h1>This file is from <span style="color:#AA0000;">12/03/2024</span></h1>
<h3>Get the latest version at <a href="https://eaglercraft.com"><span style="color:#AA0000;">eaglercraft.com</span></a></h3>
<h2 id="gameWillLaunchIn">Game will launch in <span id="launchCountdownNumber">5</span>...</h2>
<div style="border:2px solid black;width:100%;height:15px;padding:1px;margin-bottom:20vh;"><div id="launchCountdownProgress" style="background-color:#555555;width:0%;height:100%;"></div>
<p style="margin-top:30px;"><button id="skipCountdown" autofocus>Skip Countdown</button>&emsp;<button id="bootMenu">Enter Boot Menu</button></p></div>
</div>
</div>
</body>
</html>
 ]]>
</Content>
</Module>
